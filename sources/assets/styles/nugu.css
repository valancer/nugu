@import url(roboto.css);
@import url(notosanskr.css);
/**
 * variable
 */
body {
  background-color: #fff; }

/* Common Style */
* {
  margin: 0;
  padding: 0; }

/* set html5 elements to block */
article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section {
  display: block; }

html, body, div, span, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, address, cite, code, del, dfn, em, font, img, ins, q, s, samp, strike, strong, sub, sup, dl, dt, dd, ol, ul, li, fieldset, form, label, legend {
  line-height: 1.3em;
  border: 0 none; }

body {
  position: relative;
  min-height: 320px;
  margin: 0 auto;
  font-size: 100%;
  line-height: 1.3em;
  font-family: "Noto Sans KR", sans-serif;
  -ms-text-size-adjust: 100%;
      text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%; }

header, h1 {
  font-size: 100%; }

html, body {
  height: 100%; }

caption, legend {
  position: absolute;
  top: -9999px;
  left: -9999px;
  width: 0;
  height: 0;
  font-size: 0;
  overflow: hidden;
  visibility: hidden; }

caption {
  display: none; }

img {
  border: none;
  vertical-align: top;
  width: 100%; }

select, input {
  vertical-align: top; }

hr {
  display: none;
  border: 0 none; }

ol, ul, ul li {
  list-style: none; }

em {
  font-style: normal; }

menu li {
  list-style: none; }

address {
  display: inline;
  font-style: normal; }

button {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  cursor: pointer;
  border: 0px;
  background-color: transparent; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

input, textarea, keygen, select, button {
  font-family: "Noto Sans KR", sans-serif; }

strong {
  font-weight: normal; }

dfn {
  font-style: normal; }

/* link Style */
a:link, a:visited, a:active, a:focus {
  text-decoration: none; }

a:hover {
  text-decoration: none; }

.is-hidden {
  display: none !important; }

.visible-hidden {
  visibility: hidden !important; }

.clear {
  clear: both; }

.txt-center {
  text-align: center !important; }

.inline-block {
  display: inline-block;
  vertical-align: middle; }

/* forms */
fieldset {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none; }

input[type=submit],
input[type=search] {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  cursor: pointer;
  border: 0px; }

input:focus,
button:focus,
textarea:focus,
select,
div {
  outline: 0; }

/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
These "retina group" variables are mappings for the naming and pairing of normal and retina sprites.

The list formatted variables are intended for mixins like `retina-sprite` and `retina-sprites`.
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `retina-sprite` mixin sets up rules and a media query for a sprite/retina sprite.
  It should be used with a "retina group" variable.

The media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/

$icon-home-group: ('icon-home', $icon-home, $icon-home-2x, );

.icon-home {
  @include retina-sprite($icon-home-group);
}
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
/*
The `retina-sprites` mixin generates a CSS rule and media query for retina groups
  This yields the same output as CSS retina template but can be overridden in SCSS

@include retina-sprites($retina-groups);
*/
/* media queries */
/* z-index */
/* retina */
/* aspect ratio */
/**
 * import
 */
/** layout **/
/* buttons */
.btn-nugu {
  display: block;
  text-indent: -9999px;
  background-image: url(../images/mobile/sprites.png);
  background-position: 0px 0px;
  width: 40px;
  height: 28px; }
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    .btn-nugu {
      background-image: url(../images/mobile/sprites@2x.png);
      background-size: 76px 64px; } }
  @media only screen and (min-width: 768px) {
    .btn-nugu {
      background-image: url(../images/desktop/sprites.png);
      background-position: 0px 0px;
      width: 80px;
      height: 56px; } }

.btn-menu {
  display: block;
  text-indent: -9999px;
  background-image: url(../images/mobile/sprites.png);
  background-position: -46px 0px;
  width: 30px;
  height: 30px; }
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    .btn-menu {
      background-image: url(../images/mobile/sprites@2x.png);
      background-size: 76px 64px; } }

.btn-login {
  display: block;
  text-indent: -9999px;
  background-image: url(../images/mobile/sprites.png);
  background-position: 0px -34px;
  width: 30px;
  height: 30px; }
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    .btn-login {
      background-image: url(../images/mobile/sprites@2x.png);
      background-size: 76px 64px; } }
  @media only screen and (min-width: 768px) {
    .btn-login {
      background-image: url(../images/desktop/sprites.png);
      background-position: 0px -62px;
      width: 60px;
      height: 60px; } }

/* top navigation */
@media only screen and (min-width: 320px) and (max-width: 767px) {
  .shortcut-menus {
    display: none; } }

@media only screen and (min-width: 768px) {
  .shortcut-menus ul {
    text-align: center; }
  .shortcut-menus li {
    display: inline-block;
    padding: 0 36px 0 40px; }
    .shortcut-menus li > a {
      display: block;
      font-family: "Roboto", sans-serif;
      font-size: 1.125rem;
      font-weight: 500;
      color: #666;
      line-height: 100px; }
      .shortcut-menus li > a:hover {
        color: #ed6627; }
    .shortcut-menus li.is-selected > a {
      color: #ed6627; } }

body {
  background-color: #fff; }

/* header */
.layout-header {
  position: relative;
  height: 50px;
  border-bottom: 1px solid #ddd; }
  .layout-header .btn-menu {
    position: absolute;
    top: 50%;
    left: 10px;
    margin-top: -15px; }
  .layout-header .btn-nugu {
    position: absolute;
    top: 50%;
    margin-top: -14px; }
  .layout-header .btn-login {
    position: absolute;
    top: 50%;
    right: 10px;
    margin-top: -14px; }
  @media only screen and (min-width: 320px) and (max-width: 767px) {
    .layout-header .btn-nugu {
      left: 50%;
      margin-left: -20px; } }
  @media only screen and (min-width: 768px) {
    .layout-header {
      height: 100px;
      min-width: 1120px; }
      .layout-header .btn-menu {
        display: none; }
      .layout-header .btn-nugu {
        left: 40px;
        margin-top: -28px; }
      .layout-header .btn-login {
        right: 30px;
        margin-top: -28px; } }

/* contents */
/* footer */
.layout-footer {
  text-align: center; }
